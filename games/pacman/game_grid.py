from game_constants import COLUMN_COUNT, TILE_SIZE, TOP_OFFSET

# the game grid defines the functionality of each tile
# the numbers stand for:
# 0 = inside without pill;
# 1 = inside with pill;
# 2 = power pill start;
# 3 = intersection w pill
# 4 = intersection w/o pill
# 5, 6  = Portal
# 9 = wall;
game_grid = [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,
             9, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 9, 9, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 9,
             9, 1, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 1, 9, 9, 1, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 1, 9,
             9, 2, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 1, 9, 9, 1, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 2, 9,
             9, 1, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 1, 9, 9, 1, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 1, 9,
             9, 3, 1, 1, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 3, 9,
             9, 1, 9, 9, 9, 9, 1, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 1, 9, 9, 9, 9, 1, 9,
             9, 1, 9, 9, 9, 9, 1, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 1, 9, 9, 9, 9, 1, 9,
             9, 1, 1, 1, 1, 1, 3, 9, 9, 1, 1, 1, 1, 9, 9, 1, 1, 1, 1, 9, 9, 3, 1, 1, 1, 1, 1, 9,
             9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 0, 9, 9, 0, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9,
             9, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 0, 9, 9, 0, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 9,
             9, 9, 9, 9, 9, 9, 1, 9, 9, 0, 0, 0, 4, 0, 0, 4, 0, 0, 0, 9, 9, 1, 9, 9, 9, 9, 9, 9,
             9, 9, 9, 9, 9, 9, 1, 9, 9, 0, 9, 9, 9, 9, 9, 9, 9, 9, 0, 9, 9, 1, 9, 9, 9, 9, 9, 9,
             9, 9, 9, 9, 9, 9, 1, 9, 9, 0, 9, 0, 0, 0, 0, 0, 0, 9, 0, 9, 9, 1, 9, 9, 9, 9, 9, 9,
             5, 0, 0, 0, 0, 0, 3, 0, 0, 4, 9, 0, 0, 0, 0, 0, 0, 9, 4, 0, 0, 3, 0, 0, 0, 0, 0, 6,
             9, 9, 9, 9, 9, 9, 1, 9, 9, 0, 9, 0, 0, 0, 0, 0, 0, 9, 0, 9, 9, 1, 9, 9, 9, 9, 9, 9,
             9, 9, 9, 9, 9, 9, 1, 9, 9, 0, 9, 9, 9, 9, 9, 9, 9, 9, 0, 9, 9, 1, 9, 9, 9, 9, 9, 9,
             9, 9, 9, 9, 9, 9, 1, 9, 9, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 9, 9, 1, 9, 9, 9, 9, 9, 9,
             9, 9, 9, 9, 9, 9, 1, 9, 9, 0, 9, 9, 9, 9, 9, 9, 9, 9, 0, 9, 9, 1, 9, 9, 9, 9, 9, 9,
             9, 9, 9, 9, 9, 9, 1, 9, 9, 0, 9, 9, 9, 9, 9, 9, 9, 9, 0, 9, 9, 1, 9, 9, 9, 9, 9, 9,
             9, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 1, 9, 9, 1, 1, 1, 1, 1, 1, 3, 1, 1, 1, 1, 1, 9,
             9, 1, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 1, 9, 9, 1, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 1, 9,
             9, 1, 9, 9, 9, 9, 1, 9, 9, 9, 9, 9, 1, 9, 9, 1, 9, 9, 9, 9, 9, 1, 9, 9, 9, 9, 1, 9,
             9, 2, 1, 1, 9, 9, 3, 1, 1, 3, 1, 1, 3, 0, 0, 3, 1, 1, 1, 1, 1, 3, 9, 9, 1, 1, 2, 9,
             9, 9, 9, 1, 9, 9, 1, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 1, 9, 9, 1, 9, 9, 9,
             9, 9, 9, 1, 9, 9, 1, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 1, 9, 9, 1, 9, 9, 9,
             9, 1, 1, 3, 1, 1, 1, 9, 9, 1, 1, 1, 1, 9, 9, 1, 1, 1, 1, 9, 9, 1, 1, 1, 3, 1, 1, 9,
             9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9,
             9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9, 9, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 9,
             9, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 1, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 9,
             9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]


#getting col & row index from game_grid index
def map_index_to_coordinates(index):
    column_index, row_index = index % COLUMN_COUNT, index // COLUMN_COUNT
    return map_column_row_to_coordinates(column_index,row_index)

#getting index of game_grid from world-coordinates
def map_coordinates_to_index(x, y):
    column_index, row_index = (x - TILE_SIZE // 2) // TILE_SIZE, (y - TOP_OFFSET- TILE_SIZE // 2) // TILE_SIZE
    return row_index * COLUMN_COUNT + column_index

#getting world-coordinates from col & row index
def map_column_row_to_coordinates(column_index, row_index):
    x = column_index * TILE_SIZE + TILE_SIZE // 2
    y = row_index * TILE_SIZE + TILE_SIZE // 2 + TOP_OFFSET
    return x,y
